-
	Philosopher's Stone of Computation
-
	-
		Philosophy
	-
		-
			A Philosopher's Stone of Computation is an object that acts as a wrapper for an
			isolated system within a larger system.
		-
	-
		Principles
	-
		-
			Philosopher's Atlas
		-
			-
				Philosopher's Stones may be connected to form a graph, called a Philosopher's
				Atlas.
			-
		-
			Functions
		-	
			-
				Non-Overridable Functions
			-
				-
					Get Atlas
				-
					-
						The get atlas function traverses across the Philosopher's Atlas starting at
						the Philosopher's Stone it was called from. It will retain a list of
						Philosopher's Stones.
						
						For each Philosopher's Stone it traverses across, it will first call its on
						incoming function using the stored list of Philosopher's Stones. If the on
						incoming function returns true, the stone will be appended to the returned
						list. Then, for each Philosopher's Stone the current Philosopher's Stone is
						connected to that is not already in the stored list, the current
						Philosopher's Stone's on outgoing function using a list containing the
						contents of the stored list with the connected Philosopher's Stone appended
						to the end. If the on outgoing function returns true, the traversal will
						continue to the connected stone.
						
						When there are no more Philosopher's Stones that it is able to traverse
						across, it will return the stored list of Philosopher's Stones.
					-
			-
				Overridable Functions
			-
				-
					On Call
				-
					-
						This function takes an object as an argument.
						
						It may be overridden by an individual Philosopher's Stone to perform
						operations and return a single object based on the object it took as an
						argument.
						
						By default, it performs no operations and returns a null value.
					-
				-
					On Incoming
				-
					-
						The on incoming function takes a list of Philosopher's Stones representing
						a traversal path as an argument.
						
						It returns true if a traversal should continue through the stone it was
						called from, and returns false otherwise.
						
						It returns true by default.
					-
				-
					On Outgoing
				-
					-
						The on outgoing function takes a list of Philosopher's Stones representing
						a traversal path as an argument. The list must contain at least two
						Philosopher's Stones, with the second to last Philosopher's Stone in the
						list being the one the function was called from, and the last Philospher's
						Stone in the list being the next one in the projected traversal.
						
						It returns true if a traversal should continue from the stone it was called
						from to the last stone in the passed in list, and returns false otherwise.
						
						It returns true by default.
					-